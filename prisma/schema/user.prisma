model User {
  id String @id @default(uuid())

  name         String
  nickName     String  @unique
  picture      File?   @relation(fields: [fileFileName], references: [fileName])
  fileFileName String?

  role UserRole @default(REGULAR)

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  about String?

  followedBy User[] @relation("UserFollows")
  followers  User[] @relation("UserFollows")

  likedPosts Post[] @relation("likedPosts")
  posts      Post[] @relation("posts")

  userSettings   UserSettings?
  userSettingsId String?

  email String?

  interests HobbyCategory[]

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?

  donations       Donations[]
  payedFollows    Follower[]
  PostsCollection PostsCollection[]
  viewedPosts     Post[]            @relation("viewedPosts")

  @@map("users")
}

model Follower {
  duration DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Subscription {
  id String @id @default(uuid())

  duration DateTime
  start    DateTime

  User User[]
}

model Donations {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  money    Int
  currency String
}

model UserSettings {
  id String @id @default(uuid())

  webSite  String?
  country  String?
  language String  @default("ru")

  notifications Notifications?

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model HobbyCategory {
  id String @id @default(uuid())

  name String

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Notifications {
  anyoneCanSendMessage Boolean @default(true)
  whoSubscribedMe      Boolean @default(true)
  donatersOnly         Boolean @default(false)
  nobody               Boolean @default(false)

  advertisingNotifications  Boolean @default(true)
  receiveEmailNotifications Boolean @default(true)

  UserSettings   UserSettings @relation(fields: [userSettingsId], references: [id])
  userSettingsId String       @unique
}

model Account {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  token     String    @unique
  type      TokenType
  expiresIn DateTime
}

enum UserRole {
  ADMIN
  REGULAR
  MODERATOR
}

enum AuthMethod {
  YANDEX
  VK
  TON
  TELEGRAM
}

enum TokenType {
  VERIFICATION
  PASSWORD_RESET
}
